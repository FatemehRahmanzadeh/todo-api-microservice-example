name: todo-api-microservice
services:
  rest-server:
    build:
      context: .
      dockerfile: ./build/rest-server/Dockerfile
    ports:
      - 9234:9234
    command: rest-server -env /api/env.example
    environment:
      DATABASE_HOST: postgres
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      MEMCACHED_HOST: memcached:11211
      VAULT_ADDRESS: http://vault:8300
      KAFKA_HOST: kafka:29092
      KAFKA_TOPIC: tasks
    depends_on:
      postgres:
        condition: service_healthy
      vault:
        condition: service_started
      prometheus:
        condition: service_started
      jaeger:
        condition: service_started
      elasticsearch:
        condition: service_healthy
      memcached:
        condition: service_healthy
      kafka:
        condition: service_healthy
  prometheus:
    image: prom/prometheus:v2.40.7
    ports:
      - "9090:9090"
    volumes:
      - ./docs/prometheus.yml:/etc/prometheus/prometheus.yml
  jaeger:
    image: jaegertracing/all-in-one:1.40.0
    ports:
      - 16686:16686
      - 14268:14268
  postgres:
    image: postgres:16.2-bullseye
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: dbname
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_PASSWORD: password
      POSTGRES_USER: user
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s
  postgres_setup:
    image: ghcr.io/jackc/tern:v2.3.2
    restart: no
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./db/migrations/:/db/
    entrypoint: ["/tern", "migrate", "--migrations", "/db/", "--conn-string", "postgres://user:password@postgres:5432/dbname?sslmode=disable"]
  vault:
    image: vault:1.12.4
    ports:
      - 8300:8300
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8300
      VAULT_DEV_ROOT_TOKEN_ID: myroot
  elasticsearch:
    image: elasticsearch:7.17.9
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 20s
      timeout: 1s
      retries: 5
  elasticsearch_setup:
    image: curlimages/curl:8.8.0
    restart: no
    depends_on:
      elasticsearch:
        condition: service_healthy
    entrypoint: ["curl", "-X", "PUT", "-H", "Content-Type: application/json", "http://elasticsearch:9200/tasks", "-d", "{\"mappings\":{\"properties\":{\"id\":{\"type\":\"keyword\"},\"description\":{\"type\":\"text\"}}}}"]
  elasticsearch-indexer-kafka:
    build:
      dockerfile: ./build/elasticsearch-indexer-kafka/Dockerfile
    command: elasticsearch-indexer -env /api/env.example
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      JAEGER_ENDPOINT: http://jaeger:14268/api/traces
      VAULT_ADDRESS: http://vault:8300
      KAFKA_HOST: kafka:29092
      KAFKA_TOPIC: tasks
    depends_on:
      elasticsearch:
        condition: service_healthy
      jaeger:
        condition: service_started
      vault:
        condition: service_started
      kafka:
        condition: service_healthy
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.2
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit 1"]
      interval: 20s
      timeout: 1s
      retries: 5
  kafka:
    image: confluentinc/cp-kafka:7.6.2
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_BROKER_ID: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list
      interval: 30s
      timeout: 10s
      retries: 5
  kafka_setup:
    image: confluentinc/cp-kafka:7.6.2
    restart: no
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic tasks --replication-factor 1 --partitions 1
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
  memcached:
    image: memcached:1.6.19-alpine3.17
    ports:
      - 11211:11211
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 11211 || exit 1"]
      interval: 20s
      timeout: 1s
      retries: 5
